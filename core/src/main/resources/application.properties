# app info

srs-fleet-manager.name=Service Registry Service Fleet Manager
srs-fleet-manager.description=Fleet Manager serves as the control plane for a fleet of multi-tenant Service Registry deployments.
srs-fleet-manager.version=${project.version}

# === PROD

%prod.quarkus.log.level=${LOG_LEVEL:INFO}
%prod.quarkus.log.category."org.bf2.srs".level=${SRS_LOG_LEVEL:DEBUG}
%prod.quarkus.log.console.enable=true

%prod.quarkus.http.cors=true
%prod.quarkus.http.cors.origins=${CORS_ALLOWED_ORIGINS:}
%prod.quarkus.http.cors.methods=${CORS_ALLOWED_METHODS:GET,PUT,POST,PATCH,DELETE,OPTIONS}
%prod.quarkus.http.cors.headers=${CORS_ALLOWED_HEADERS:access-control-request-method,access-control-allow-credentials,access-control-allow-origin,access-control-allow-headers,authorization,content-type}


%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.jdbc.url=${SERVICE_API_DATASOURCE_URL}
%prod.quarkus.datasource.username=${SERVICE_API_DATASOURCE_USERNAME:postgres}
%prod.quarkus.datasource.password=${SERVICE_API_DATASOURCE_PASSWORD:postgres}

%prod.quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQL95Dialect
%prod.quarkus.hibernate-orm.log.sql=false
%prod.quarkus.hibernate-orm.database.generation=none


%prod.quarkus.flyway.locations=db/migration/postgresql95

%prod.quarkus.quartz.start-mode=halted
%prod.quarkus.quartz.clustered=true
%prod.quarkus.quartz.store-type=jdbc_cmt

%prod.srs-fleet-manager.max-retries-delay-seconds=600

%prod.quarkus.package.type=legacy-jar

# === DEV

%dev.quarkus.http.port=8081
%dev.quarkus.log.level=${LOG_LEVEL:INFO}
%dev.quarkus.log.category."org.bf2.srs".level=${LOG_LEVEL:DEBUG}
%dev.quarkus.log.console.enable=true

%dev.quarkus.http.cors=true

%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:service-api;DB_CLOSE_ON_EXIT=FALSE
%dev.quarkus.datasource.username=sa
%dev.quarkus.datasource.password=

%dev.quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect
%dev.quarkus.hibernate-orm.log.sql=true

%dev.quarkus.flyway.locations=db/migration/h2

%dev.quarkus.quartz.start-mode=halted
#%dev.quarkus.quartz.clustered=true
%dev.quarkus.quartz.store-type=jdbc_cmt

%dev.srs-fleet-manager.max-retries-delay-seconds=600

%dev.quarkus.package.type=legacy-jar

# === TEST

%test.quarkus.log.console.enable=true

%test.quarkus.flyway.locations=db/migration/h2
%test.quarkus.quartz.start-mode=halted

%test.srs-fleet-manager.max-retries-delay-seconds=5

# === Auth - disabled by default

srs-fleet-manager.auth.enabled=${AUTH_ENABLED:false}

quarkus.oidc.enabled=true
quarkus.oidc.tenant-enabled=${srs-fleet-manager.auth.enabled}

srs-fleet-manager.keycloak.url=${KEYCLOAK_URL:http://localhost:8090/auth}
srs-fleet-manager.keycloak.realm=${KEYCLOAK_REALM:apicurio-local}

quarkus.oidc.auth-server-url=${srs-fleet-manager.keycloak.url}/realms/${srs-fleet-manager.keycloak.realm}
quarkus.oidc.client-id=${KEYCLOAK_API_CLIENT_ID:srs-fleet-manager}

quarkus.http.auth.permission.authenticated.enabled=true
quarkus.http.auth.permission.authenticated.paths=/api/*
quarkus.http.auth.permission.authenticated.policy=authenticated

quarkus.http.auth.permission.permit1.enabled=true
quarkus.http.auth.permission.permit1.paths=/api/serviceregistry_mgmt/v1/openapi,/api/serviceregistry_mgmt/v1/errors,/api/serviceregistry_mgmt/v1/errors/*
quarkus.http.auth.permission.permit1.policy=permit
quarkus.http.auth.permission.permit1.methods=GET

srs-fleet-manager.tenant-manager.ssl.ca.path=${TENANT_MANAGER_CA_BUNDLE:}
srs-fleet-manager.tenant-manager.auth.enabled=${TENANT_MANAGER_AUTH_ENABLED:${srs-fleet-manager.auth.enabled}}
srs-fleet-manager.tenant-manager.auth.server-url=${TENANT_MANAGER_AUTH_SERVER_URL:http://localhost:8090}
srs-fleet-manager.tenant-manager.auth.realm=${TENANT_MANAGER_AUTH_SERVER_REALM:default_realm}
srs-fleet-manager.tenant-manager.auth.client-id=${TENANT_MANAGER_AUTH_CLIENT_ID:default_client}
srs-fleet-manager.tenant-manager.auth.secret=${TENANT_MANAGER_AUTH_SECRET:default_secret}
srs-fleet-manager.tenant-manager.auth.server-url.configured=${TOKEN_ENDPOINT:${srs-fleet-manager.tenant-manager.auth.server-url}/realms/${srs-fleet-manager.tenant-manager.auth.realm}/protocol/openid-connect/token}

srs-fleet-manager.organization-id.claim-name=${ORGANIZATION_ID_CLAIM:org_id}
srs-fleet-manager.default-org=${DEFAULT_ORG:default-org}
srs-fleet-manager.is-org-admin.claim-name=${IS_ORG_ADMIN_CLAIM_NAME:is_org_admin}
srs-fleet-manager.account-id.claim-name=${ACCOUNT_ID_CLAIM_NAME:account_id}
srs-fleet-manager.default-account-id=${DEFAULT_ACCOUNT_ID:1}

srs-fleet-manager.registry.browser-url=${REGISTRY_BROWSER_URL:http://localhost:8080/t/TENANT_ID}

# === Metrics

quarkus.micrometer.enabled=true
quarkus.micrometer.registry-enabled-default=true
quarkus.micrometer.binder.http-server.enabled=true
quarkus.micrometer.binder.http-server.ignore-patterns=/q/metrics,/q/health.*,/favicon.ico,NOT_FOUND,root,/,REDIRECTION,/cors-preflight
quarkus.micrometer.export.prometheus.enabled=true
quarkus.datasource.metrics.enabled=true
quarkus.datasource.jdbc.enable-metrics=true

# === Configuration for Registry instances types

srs-fleet-manager.registry.instances.max-count=${REGISTRY_INSTANCES_MAX_COUNT:1000}
srs-fleet-manager.registry.instances.eval.enabled=${REGISTRY_INSTANCES_EVAL_ENABLED:true}
srs-fleet-manager.registry.instances.eval.only=${REGISTRY_INSTANCES_EVAL_ONLY:false}
srs-fleet-manager.registry.instances.eval.max-count-per-user=${REGISTRY_INSTANCES_EVAL_MAX_COUNT_PER_USER:1}
# 172800 seconds = 60 * 60 * 48 = 48 hours
srs-fleet-manager.registry.instances.eval.lifetime-seconds=${REGISTRY_INSTANCES_EVAL_LIFETIME_SECONDS:172800}

# === Date format, API Spec requires ISO 8601 UTC
user.timezone=UTC

# Sentry - the rest of the sentry configuration is picked from sentry own env vars
srs-fleet-manager.enable.sentry=${ENABLE_SENTRY:false}

# Comma-separated list of patterns that, if any of them math a request path, the request is rejected.
# Example: REST_API_DISABLED_PATHS_PATTERNS="/api/serviceregistry_mgmt/v1/admin.*"
srs-fleet-manager.rest-api.disabled-paths-patterns=${REST_API_DISABLED_PATHS_PATTERNS:}

srs-fleet-manager.operation.metrics.usage-statistics.cache-expiration-period-seconds=${METRICS_CACHE_EXPIRATION_PERIOD_SECONDS:300}

# === Execution

srs-fleet-manager.execution.deprovisioning.stuck-instance-timeout-seconds=${EXECUTION_DEPROVISION_STUCK_INSTANCE_TIMEOUT_SECONDS:3600}

# Identity Server Migration
srs-fleet-manager.identity.server.resolver.request-base-path=${IDENTITY_SERVER_RESOLVER_PATH:http://localhost:8080}
srs-fleet-manager.identity.server.resolver.request-path=${IDENTITY_SERVER_RESOLVER_REQUEST_PATH:api/kafkas_mgmt/v1/sso_providers}
srs-fleet-manager.identity.server.resolver.enabled=${IDENTITY_SERVER_RESOLVER_ENABLED:false}
srs-fleet-manager.identity.server.resolver.auth-server-url=${IDENTITY_SERVER_RESOLVER_AUTH_SERVER_URL:http://localhost:8090/auth}
srs-fleet-manager.identity.server.resolver.client-id=${IDENTITY_SERVER_RESOLVER_CLIENT_ID:registry-api}
srs-fleet-manager.identity.server.resolver.client-secret=${IDENTITY_SERVER_RESOLVER_CLIENT_SECRET:secret}

# === Deployments

srs-fleet-manager.deployments.allow-local-defaults=${ALLOW_LOCAL_DEPLOYMENT_DEFAULTS:true}