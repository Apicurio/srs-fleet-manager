# === PROD

%prod.quarkus.log.level=${LOG_LEVEL:INFO}
%prod.quarkus.log.category."org.bf2.srs".level=${SRS_LOG_LEVEL:DEBUG}
%prod.quarkus.log.console.enable=true

%prod.quarkus.http.cors=true

%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.jdbc.url=${SERVICE_API_DATASOURCE_URL}
%prod.quarkus.datasource.username=${SERVICE_API_DATASOURCE_USERNAME:postgres}
%prod.quarkus.datasource.password=${SERVICE_API_DATASOURCE_PASSWORD:postgres}

%prod.quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQL95Dialect
%prod.quarkus.hibernate-orm.database.generation=update

%prod.quarkus.flyway.migrate-at-start=true

%prod.quarkus.quartz.force-start=true
#%prod.quarkus.quartz.clustered=true
%prod.quarkus.quartz.store-type=jdbc_cmt

# === DEV

%dev.quarkus.log.level=${LOG_LEVEL:INFO}
%dev.quarkus.log.category."org.bf2.srs".level=${LOG_LEVEL:DEBUG}
%dev.quarkus.log.console.enable=true

%dev.quarkus.http.cors=true

%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:service-api;DB_CLOSE_ON_EXIT=FALSE
%dev.quarkus.datasource.username=sa
%dev.quarkus.datasource.password=

%dev.quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect
%dev.quarkus.hibernate-orm.database.generation=drop-and-create

%dev.quarkus.flyway.migrate-at-start=true

%dev.quarkus.quartz.force-start=true
#%dev.quarkus.quartz.clustered=true
%dev.quarkus.quartz.store-type=jdbc_cmt

#Auth - disabled by default

srs-fleet-manager.auth.enabled=${AUTH_ENABLED:false}

quarkus.oidc.enabled=true
quarkus.oidc.tenant-enabled=${srs-fleet-manager.auth.enabled}

srs-fleet-manager.keycloak.url=${KEYCLOAK_URL:http:localhost:8090}
srs-fleet-manager.keycloak.realm=${KEYCLOAK_REALM:apicurio-local}

quarkus.oidc.auth-server-url=${srs-fleet-manager.keycloak.url}/realms/${srs-fleet-manager.keycloak.realm}
quarkus.oidc.client-id=${KEYCLOAK_API_CLIENT_ID:srs-fleet-manager}

quarkus.http.auth.permission.authenticated.enabled=${srs-fleet-manager.auth.enabled}
quarkus.http.auth.permission.authenticated.paths=/api/*
quarkus.http.auth.permission.authenticated.policy=authenticated

srs-fleet-manager.tenant-manager.auth.server-url=${TENANT_MANAGER_AUTH_SERVER_URL:http:localhost:8090}
srs-fleet-manager.tenant-manager.auth.realm=${TENANT_MANAGER_AUTH_SERVER_URL:default_realm}
srs-fleet-manager.tenant-manager.auth.client-id=${TENANT_MANAGER_AUTH_CLIENT_ID:default_client}
srs-fleet-manager.tenant-manager.auth.secret=${TENANT_MANAGER_AUTH_SECRET:default_secret}


srs-fleet-manager.organization-id.claim-name=${ORGANIZATION_ID_CLAIM:org-id}
srs-fleet-manager.default-org=${DEFAULT_ORG:default-org}