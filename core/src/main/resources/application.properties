# === PROD

%prod.quarkus.log.level=${LOG_LEVEL:INFO}
%prod.quarkus.log.category."org.bf2.srs".level=${SRS_LOG_LEVEL:DEBUG}
%prod.quarkus.log.console.enable=true

%prod.quarkus.http.cors=true

%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.jdbc.url=${SERVICE_API_DATASOURCE_URL}
%prod.quarkus.datasource.username=${SERVICE_API_DATASOURCE_USERNAME:postgres}
%prod.quarkus.datasource.password=${SERVICE_API_DATASOURCE_PASSWORD:postgres}

%prod.quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQL95Dialect
%prod.quarkus.hibernate-orm.log.sql=false
%prod.quarkus.hibernate-orm.database.generation=none


%prod.quarkus.flyway.locations=db/migration/postgresql95

%prod.quarkus.quartz.start-mode=halted
%prod.quarkus.quartz.clustered=true
%prod.quarkus.quartz.store-type=jdbc_cmt

%prod.quarkus.package.type=legacy-jar

# === DEV

%dev.quarkus.log.level=${LOG_LEVEL:INFO}
%dev.quarkus.log.category."org.bf2.srs".level=${LOG_LEVEL:DEBUG}
%dev.quarkus.log.console.enable=true

%dev.quarkus.http.cors=true

%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:service-api;DB_CLOSE_ON_EXIT=FALSE
%dev.quarkus.datasource.username=sa
%dev.quarkus.datasource.password=

%dev.quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect
%dev.quarkus.hibernate-orm.log.sql=true

%dev.quarkus.flyway.locations=db/migration/h2

%dev.quarkus.quartz.start-mode=halted
#%dev.quarkus.quartz.clustered=true
%dev.quarkus.quartz.store-type=jdbc_cmt

%dev.quarkus.package.type=legacy-jar

# === TEST

%test.quarkus.log.console.enable=true

%test.quarkus.flyway.locations=db/migration/h2

# === Auth - disabled by default

srs-fleet-manager.auth.enabled=${AUTH_ENABLED:false}

quarkus.oidc.enabled=true
quarkus.oidc.tenant-enabled=${srs-fleet-manager.auth.enabled}

srs-fleet-manager.keycloak.url=${KEYCLOAK_URL:http://localhost:8090/auth}
srs-fleet-manager.keycloak.realm=${KEYCLOAK_REALM:apicurio-local}

quarkus.oidc.auth-server-url=${srs-fleet-manager.keycloak.url}/realms/${srs-fleet-manager.keycloak.realm}
quarkus.oidc.client-id=${KEYCLOAK_API_CLIENT_ID:srs-fleet-manager}

quarkus.http.auth.permission.authenticated.enabled=${srs-fleet-manager.auth.enabled}
quarkus.http.auth.permission.authenticated.paths=/api/*
quarkus.http.auth.permission.authenticated.policy=authenticated

quarkus.http.auth.permission.permit1.enabled=true
quarkus.http.auth.permission.permit1.paths=/api/serviceregistry_mgmt/v1/openapi
quarkus.http.auth.permission.permit1.policy=permit
quarkus.http.auth.permission.permit1.methods=GET

srs-fleet-manager.tenant-manager.auth.enabled=${TENANT_MANAGER_AUTH_ENABLED:${srs-fleet-manager.auth.enabled}}
srs-fleet-manager.tenant-manager.auth.server-url=${TENANT_MANAGER_AUTH_SERVER_URL:http://localhost:8090}
srs-fleet-manager.tenant-manager.auth.realm=${TENANT_MANAGER_AUTH_SERVER_REALM:default_realm}
srs-fleet-manager.tenant-manager.auth.client-id=${TENANT_MANAGER_AUTH_CLIENT_ID:default_client}
srs-fleet-manager.tenant-manager.auth.secret=${TENANT_MANAGER_AUTH_SECRET:default_secret}
srs-fleet-manager.tenant-manager.auth.server-url.configured=${TOKEN_ENDPOINT:${srs-fleet-manager.tenant-manager.auth.server-url}/realms/${srs-fleet-manager.tenant-manager.auth.realm}/protocol/openid-connect/token}

srs-fleet-manager.organization-id.claim-name=${ORGANIZATION_ID_CLAIM:org_id}
srs-fleet-manager.default-org=${DEFAULT_ORG:default-org}
srs-fleet-manager.is-org-admin.claim-name=${IS_ORG_ADMIN_CLAIM_NAME:is_org_admin}
srs-fleet-manager.account-id.claim-name=${ACCOUNT_ID_CLAIM_NAME:account_id}
srs-fleet-manager.default-account-id=${DEFAULT_ACCOUNT_ID:1}


# === Metrics

quarkus.micrometer.enabled=true
quarkus.micrometer.registry-enabled-default=true
quarkus.micrometer.binder.http-server.enabled=true
quarkus.micrometer.binder.http-server.ignore-patterns=/q/metrics,/q/health.*,/favicon.ico,NOT_FOUND,root,/,REDIRECTION,/cors-preflight
quarkus.micrometer.export.prometheus.enabled=true
quarkus.datasource.metrics.enabled=true
quarkus.datasource.jdbc.enable-metrics=true

# === Configuration for Registry instances types

srs-fleet-manager.registry.instances.max-count=${REGISTRY_INSTANCES_MAX_COUNT:1000}
srs-fleet-manager.registry.instances.eval.enabled=${REGISTRY_INSTANCES_EVAL_ENABLED:true}
srs-fleet-manager.registry.instances.eval.max-count-per-user=${REGISTRY_INSTANCES_EVAL_MAX_COUNT_PER_USER:1}
# 172800 seconds = 60 * 60 * 48 = 48 hours
srs-fleet-manager.registry.instances.eval.lifetime-seconds=${REGISTRY_INSTANCES_EVAL_LIFETIME_SECONDS:172800}

# === Date format, API Spec requires ISO 8601 UTC
user.timezone=UTC

# Sentry
srs-fleet-manager.sentry.key=${SENTRY_KEY:}
srs-fleet-manager.sentry.url=${SENTRY_URL:sentry.autom8.in}
srs-fleet-manager.sentry.project=${SENTRY_PROJECT:1}
srs-fleet-manager.sentry.dsn=https://${srs-fleet-manager.sentry.key}@${srs-fleet-manager.sentry.url}/${srs-fleet-manager.sentry.project}

quarkus.log.sentry=${ENABLE_SENTRY:false}
quarkus.log.sentry.dsn=${registry.sentry.dsn:}
quarkus.log.sentry.level=${SENTRY_LEVEL:ERROR}
quarkus.log.sentry.in-app-packages=*
quarkus.log.sentry.debug=${SENTRY_DEBUG:false}
